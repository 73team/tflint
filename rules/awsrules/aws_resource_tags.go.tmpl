package awsrules

import (
	"fmt"
	"sort"
	"strings"

	hcl "github.com/hashicorp/hcl/v2"
	"github.com/terraform-linters/tflint/tflint"
)

// AwsResourceTagsRule checks whether the resource is tagged correctly
type AwsResourceTagsRule struct {
	resourceTypes  []string
}

type awsResourceTagsRuleConfig struct {
	Tags []string `hcl:"tags"`
}

// NewAwsResourceTagsRule returns new rules for all resources that support tags
func NewAwsResourceTagsRule() *AwsResourceTagsRule {
	resourceTypes := []string{
		{{- range .ResourceNames }}
		"{{ . }}",
		{{- end }}
	}
	return &AwsResourceTagsRule{
		resourceTypes: resourceTypes,
	}
}

// Name returns the rule name
func (r *AwsResourceTagsRule) Name() string {
	return "aws_resource_tags"
}

// Enabled returns whether the rule is enabled by default
func (r *AwsResourceTagsRule) Enabled() bool {
	return true
}

// Severity returns the rule severity
func (r *AwsResourceTagsRule) Severity() string {
	return tflint.ERROR
}

// Link returns the rule reference link
func (r *AwsResourceTagsRule) Link() string {
	return tflint.ReferenceLink(r.Name())
}

// Check checks for matching tags
func (r *AwsResourceTagsRule) Check(runner *tflint.Runner) error {
	config :=  awsResourceTagsRuleConfig{}
	if err := runner.DecodeRuleConfig(r.Name(), &config); err != nil {
		return err
	}

	for _, resourceType := range r.resourceTypes {
		err := runner.WalkResourceAttributes(resourceType, "tags", func(attribute *hcl.Attribute) error {
			var resourceTags map[string]string
			err := runner.EvaluateExpr(attribute.Expr, &resourceTags)
			tags := []string{}
			for k := range resourceTags {
				tags = append(tags, k)
			}

			return runner.EnsureNoError(err, func() error {
				hash := make(map[string]bool)
				for _, k := range tags {
					hash[k] = true
				}
				var found []string
				for _, tag := range config.Tags {
					if _, ok := hash[tag]; ok {
						found = append(found, tag)
					}
				}
				if len(found) != len(config.Tags) {
					sort.Strings(config.Tags)
					sort.Strings(tags)
					wanted := strings.Join(config.Tags, ",")
					found := strings.Join(tags, ",")
					runner.EmitIssue(r, fmt.Sprintf("Wanted tags: %v, found: %v", wanted, found), attribute.Expr.Range())
				}
				return nil
			})
		})
		if err != nil {
			return err
		}
	}
	return nil
}
