// Automatically generated by MockGen. DO NOT EDIT!
// Source: loader/loader.go

package mock

import (
	gomock "github.com/golang/mock/gomock"
	ast "github.com/hashicorp/hcl/hcl/ast"
	state "github.com/wata727/tflint/state"
)

// Mock of LoaderIF interface
type MockLoaderIF struct {
	ctrl     *gomock.Controller
	recorder *_MockLoaderIFRecorder
}

// Recorder for MockLoaderIF (not exported)
type _MockLoaderIFRecorder struct {
	mock *MockLoaderIF
}

func NewMockLoaderIF(ctrl *gomock.Controller) *MockLoaderIF {
	mock := &MockLoaderIF{ctrl: ctrl}
	mock.recorder = &_MockLoaderIFRecorder{mock}
	return mock
}

func (_m *MockLoaderIF) EXPECT() *_MockLoaderIFRecorder {
	return _m.recorder
}

func (_m *MockLoaderIF) LoadTemplate(filename string) error {
	ret := _m.ctrl.Call(_m, "LoadTemplate", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLoaderIFRecorder) LoadTemplate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadTemplate", arg0)
}

func (_m *MockLoaderIF) LoadModuleFile(moduleKey string, source string) error {
	ret := _m.ctrl.Call(_m, "LoadModuleFile", moduleKey, source)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLoaderIFRecorder) LoadModuleFile(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadModuleFile", arg0, arg1)
}

func (_m *MockLoaderIF) LoadAllTemplate(dir string) error {
	ret := _m.ctrl.Call(_m, "LoadAllTemplate", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLoaderIFRecorder) LoadAllTemplate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadAllTemplate", arg0)
}

func (_m *MockLoaderIF) Dump() (map[string]*ast.ObjectList, *state.TFState) {
	ret := _m.ctrl.Call(_m, "Dump")
	ret0, _ := ret[0].(map[string]*ast.ObjectList)
	ret1, _ := ret[1].(*state.TFState)
	return ret0, ret1
}

func (_mr *_MockLoaderIFRecorder) Dump() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Dump")
}

func (_m *MockLoaderIF) LoadState() {
	_m.ctrl.Call(_m, "LoadState")
}

func (_mr *_MockLoaderIFRecorder) LoadState() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadState")
}
