// Code generated by MockGen. DO NOT EDIT.
// Source: loader/loader.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	ast "github.com/hashicorp/hcl/hcl/ast"
	state "github.com/wata727/tflint/state"
	reflect "reflect"
)

// MockLoaderIF is a mock of LoaderIF interface
type MockLoaderIF struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderIFMockRecorder
}

// MockLoaderIFMockRecorder is the mock recorder for MockLoaderIF
type MockLoaderIFMockRecorder struct {
	mock *MockLoaderIF
}

// NewMockLoaderIF creates a new mock instance
func NewMockLoaderIF(ctrl *gomock.Controller) *MockLoaderIF {
	mock := &MockLoaderIF{ctrl: ctrl}
	mock.recorder = &MockLoaderIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoaderIF) EXPECT() *MockLoaderIFMockRecorder {
	return m.recorder
}

// LoadTemplate mocks base method
func (m *MockLoaderIF) LoadTemplate(filename string) error {
	ret := m.ctrl.Call(m, "LoadTemplate", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadTemplate indicates an expected call of LoadTemplate
func (mr *MockLoaderIFMockRecorder) LoadTemplate(filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTemplate", reflect.TypeOf((*MockLoaderIF)(nil).LoadTemplate), filename)
}

// LoadModuleFile mocks base method
func (m *MockLoaderIF) LoadModuleFile(moduleKey, source string) error {
	ret := m.ctrl.Call(m, "LoadModuleFile", moduleKey, source)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadModuleFile indicates an expected call of LoadModuleFile
func (mr *MockLoaderIFMockRecorder) LoadModuleFile(moduleKey, source interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadModuleFile", reflect.TypeOf((*MockLoaderIF)(nil).LoadModuleFile), moduleKey, source)
}

// LoadAllTemplate mocks base method
func (m *MockLoaderIF) LoadAllTemplate(dir string) error {
	ret := m.ctrl.Call(m, "LoadAllTemplate", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadAllTemplate indicates an expected call of LoadAllTemplate
func (mr *MockLoaderIFMockRecorder) LoadAllTemplate(dir interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllTemplate", reflect.TypeOf((*MockLoaderIF)(nil).LoadAllTemplate), dir)
}

// Dump mocks base method
func (m *MockLoaderIF) Dump() (map[string]*ast.File, map[string][]byte, *state.TFState, []*ast.File) {
	ret := m.ctrl.Call(m, "Dump")
	ret0, _ := ret[0].(map[string]*ast.File)
	ret1, _ := ret[1].(map[string][]byte)
	ret2, _ := ret[2].(*state.TFState)
	ret3, _ := ret[3].([]*ast.File)
	return ret0, ret1, ret2, ret3
}

// Dump indicates an expected call of Dump
func (mr *MockLoaderIFMockRecorder) Dump() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockLoaderIF)(nil).Dump))
}

// LoadState mocks base method
func (m *MockLoaderIF) LoadState() {
	m.ctrl.Call(m, "LoadState")
}

// LoadState indicates an expected call of LoadState
func (mr *MockLoaderIFMockRecorder) LoadState() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadState", reflect.TypeOf((*MockLoaderIF)(nil).LoadState))
}

// LoadTFVars mocks base method
func (m *MockLoaderIF) LoadTFVars(arg0 []string) {
	m.ctrl.Call(m, "LoadTFVars", arg0)
}

// LoadTFVars indicates an expected call of LoadTFVars
func (mr *MockLoaderIFMockRecorder) LoadTFVars(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTFVars", reflect.TypeOf((*MockLoaderIF)(nil).LoadTFVars), arg0)
}
