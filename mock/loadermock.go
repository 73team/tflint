// Automatically generated by MockGen. DO NOT EDIT!
// Source: loader/loader.go

package mock

import (
	gomock "github.com/golang/mock/gomock"
	ast "github.com/hashicorp/hcl/hcl/ast"
)

// Mock of LoaderIF interface
type MockLoaderIF struct {
	ctrl     *gomock.Controller
	recorder *_MockLoaderIFRecorder
}

// Recorder for MockLoaderIF (not exported)
type _MockLoaderIFRecorder struct {
	mock *MockLoaderIF
}

func NewMockLoaderIF(ctrl *gomock.Controller) *MockLoaderIF {
	mock := &MockLoaderIF{ctrl: ctrl}
	mock.recorder = &_MockLoaderIFRecorder{mock}
	return mock
}

func (_m *MockLoaderIF) EXPECT() *_MockLoaderIFRecorder {
	return _m.recorder
}

func (_m *MockLoaderIF) LoadFile(filename string) error {
	ret := _m.ctrl.Call(_m, "LoadFile", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLoaderIFRecorder) LoadFile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadFile", arg0)
}

func (_m *MockLoaderIF) LoadModuleFile(moduleKey string, source string) error {
	ret := _m.ctrl.Call(_m, "LoadModuleFile", moduleKey, source)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLoaderIFRecorder) LoadModuleFile(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadModuleFile", arg0, arg1)
}

func (_m *MockLoaderIF) LoadAllFile(dir string) error {
	ret := _m.ctrl.Call(_m, "LoadAllFile", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLoaderIFRecorder) LoadAllFile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadAllFile", arg0)
}

func (_m *MockLoaderIF) DumpFiles() map[string]*ast.ObjectList {
	ret := _m.ctrl.Call(_m, "DumpFiles")
	ret0, _ := ret[0].(map[string]*ast.ObjectList)
	return ret0
}

func (_mr *_MockLoaderIFRecorder) DumpFiles() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DumpFiles")
}
