// Automatically generated by MockGen. DO NOT EDIT!
// Source: vendor/github.com/aws/aws-sdk-go/service/elb/elbiface/interface.go

package mock

import (
	request "github.com/aws/aws-sdk-go/aws/request"
	elb "github.com/aws/aws-sdk-go/service/elb"
	gomock "github.com/golang/mock/gomock"
)

// Mock of ELBAPI interface
type MockELBAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockELBAPIRecorder
}

// Recorder for MockELBAPI (not exported)
type _MockELBAPIRecorder struct {
	mock *MockELBAPI
}

func NewMockELBAPI(ctrl *gomock.Controller) *MockELBAPI {
	mock := &MockELBAPI{ctrl: ctrl}
	mock.recorder = &_MockELBAPIRecorder{mock}
	return mock
}

func (_m *MockELBAPI) EXPECT() *_MockELBAPIRecorder {
	return _m.recorder
}

func (_m *MockELBAPI) AddTagsRequest(_param0 *elb.AddTagsInput) (*request.Request, *elb.AddTagsOutput) {
	ret := _m.ctrl.Call(_m, "AddTagsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.AddTagsOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) AddTagsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTagsRequest", arg0)
}

func (_m *MockELBAPI) AddTags(_param0 *elb.AddTagsInput) (*elb.AddTagsOutput, error) {
	ret := _m.ctrl.Call(_m, "AddTags", _param0)
	ret0, _ := ret[0].(*elb.AddTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) AddTags(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTags", arg0)
}

func (_m *MockELBAPI) ApplySecurityGroupsToLoadBalancerRequest(_param0 *elb.ApplySecurityGroupsToLoadBalancerInput) (*request.Request, *elb.ApplySecurityGroupsToLoadBalancerOutput) {
	ret := _m.ctrl.Call(_m, "ApplySecurityGroupsToLoadBalancerRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.ApplySecurityGroupsToLoadBalancerOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) ApplySecurityGroupsToLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ApplySecurityGroupsToLoadBalancerRequest", arg0)
}

func (_m *MockELBAPI) ApplySecurityGroupsToLoadBalancer(_param0 *elb.ApplySecurityGroupsToLoadBalancerInput) (*elb.ApplySecurityGroupsToLoadBalancerOutput, error) {
	ret := _m.ctrl.Call(_m, "ApplySecurityGroupsToLoadBalancer", _param0)
	ret0, _ := ret[0].(*elb.ApplySecurityGroupsToLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) ApplySecurityGroupsToLoadBalancer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ApplySecurityGroupsToLoadBalancer", arg0)
}

func (_m *MockELBAPI) AttachLoadBalancerToSubnetsRequest(_param0 *elb.AttachLoadBalancerToSubnetsInput) (*request.Request, *elb.AttachLoadBalancerToSubnetsOutput) {
	ret := _m.ctrl.Call(_m, "AttachLoadBalancerToSubnetsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.AttachLoadBalancerToSubnetsOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) AttachLoadBalancerToSubnetsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachLoadBalancerToSubnetsRequest", arg0)
}

func (_m *MockELBAPI) AttachLoadBalancerToSubnets(_param0 *elb.AttachLoadBalancerToSubnetsInput) (*elb.AttachLoadBalancerToSubnetsOutput, error) {
	ret := _m.ctrl.Call(_m, "AttachLoadBalancerToSubnets", _param0)
	ret0, _ := ret[0].(*elb.AttachLoadBalancerToSubnetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) AttachLoadBalancerToSubnets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachLoadBalancerToSubnets", arg0)
}

func (_m *MockELBAPI) ConfigureHealthCheckRequest(_param0 *elb.ConfigureHealthCheckInput) (*request.Request, *elb.ConfigureHealthCheckOutput) {
	ret := _m.ctrl.Call(_m, "ConfigureHealthCheckRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.ConfigureHealthCheckOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) ConfigureHealthCheckRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfigureHealthCheckRequest", arg0)
}

func (_m *MockELBAPI) ConfigureHealthCheck(_param0 *elb.ConfigureHealthCheckInput) (*elb.ConfigureHealthCheckOutput, error) {
	ret := _m.ctrl.Call(_m, "ConfigureHealthCheck", _param0)
	ret0, _ := ret[0].(*elb.ConfigureHealthCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) ConfigureHealthCheck(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfigureHealthCheck", arg0)
}

func (_m *MockELBAPI) CreateAppCookieStickinessPolicyRequest(_param0 *elb.CreateAppCookieStickinessPolicyInput) (*request.Request, *elb.CreateAppCookieStickinessPolicyOutput) {
	ret := _m.ctrl.Call(_m, "CreateAppCookieStickinessPolicyRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.CreateAppCookieStickinessPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) CreateAppCookieStickinessPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAppCookieStickinessPolicyRequest", arg0)
}

func (_m *MockELBAPI) CreateAppCookieStickinessPolicy(_param0 *elb.CreateAppCookieStickinessPolicyInput) (*elb.CreateAppCookieStickinessPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateAppCookieStickinessPolicy", _param0)
	ret0, _ := ret[0].(*elb.CreateAppCookieStickinessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) CreateAppCookieStickinessPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAppCookieStickinessPolicy", arg0)
}

func (_m *MockELBAPI) CreateLBCookieStickinessPolicyRequest(_param0 *elb.CreateLBCookieStickinessPolicyInput) (*request.Request, *elb.CreateLBCookieStickinessPolicyOutput) {
	ret := _m.ctrl.Call(_m, "CreateLBCookieStickinessPolicyRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.CreateLBCookieStickinessPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) CreateLBCookieStickinessPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLBCookieStickinessPolicyRequest", arg0)
}

func (_m *MockELBAPI) CreateLBCookieStickinessPolicy(_param0 *elb.CreateLBCookieStickinessPolicyInput) (*elb.CreateLBCookieStickinessPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateLBCookieStickinessPolicy", _param0)
	ret0, _ := ret[0].(*elb.CreateLBCookieStickinessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) CreateLBCookieStickinessPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLBCookieStickinessPolicy", arg0)
}

func (_m *MockELBAPI) CreateLoadBalancerRequest(_param0 *elb.CreateLoadBalancerInput) (*request.Request, *elb.CreateLoadBalancerOutput) {
	ret := _m.ctrl.Call(_m, "CreateLoadBalancerRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.CreateLoadBalancerOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) CreateLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLoadBalancerRequest", arg0)
}

func (_m *MockELBAPI) CreateLoadBalancer(_param0 *elb.CreateLoadBalancerInput) (*elb.CreateLoadBalancerOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateLoadBalancer", _param0)
	ret0, _ := ret[0].(*elb.CreateLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) CreateLoadBalancer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLoadBalancer", arg0)
}

func (_m *MockELBAPI) CreateLoadBalancerListenersRequest(_param0 *elb.CreateLoadBalancerListenersInput) (*request.Request, *elb.CreateLoadBalancerListenersOutput) {
	ret := _m.ctrl.Call(_m, "CreateLoadBalancerListenersRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.CreateLoadBalancerListenersOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) CreateLoadBalancerListenersRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLoadBalancerListenersRequest", arg0)
}

func (_m *MockELBAPI) CreateLoadBalancerListeners(_param0 *elb.CreateLoadBalancerListenersInput) (*elb.CreateLoadBalancerListenersOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateLoadBalancerListeners", _param0)
	ret0, _ := ret[0].(*elb.CreateLoadBalancerListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) CreateLoadBalancerListeners(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLoadBalancerListeners", arg0)
}

func (_m *MockELBAPI) CreateLoadBalancerPolicyRequest(_param0 *elb.CreateLoadBalancerPolicyInput) (*request.Request, *elb.CreateLoadBalancerPolicyOutput) {
	ret := _m.ctrl.Call(_m, "CreateLoadBalancerPolicyRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.CreateLoadBalancerPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) CreateLoadBalancerPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLoadBalancerPolicyRequest", arg0)
}

func (_m *MockELBAPI) CreateLoadBalancerPolicy(_param0 *elb.CreateLoadBalancerPolicyInput) (*elb.CreateLoadBalancerPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateLoadBalancerPolicy", _param0)
	ret0, _ := ret[0].(*elb.CreateLoadBalancerPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) CreateLoadBalancerPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLoadBalancerPolicy", arg0)
}

func (_m *MockELBAPI) DeleteLoadBalancerRequest(_param0 *elb.DeleteLoadBalancerInput) (*request.Request, *elb.DeleteLoadBalancerOutput) {
	ret := _m.ctrl.Call(_m, "DeleteLoadBalancerRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DeleteLoadBalancerOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DeleteLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteLoadBalancerRequest", arg0)
}

func (_m *MockELBAPI) DeleteLoadBalancer(_param0 *elb.DeleteLoadBalancerInput) (*elb.DeleteLoadBalancerOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteLoadBalancer", _param0)
	ret0, _ := ret[0].(*elb.DeleteLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DeleteLoadBalancer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteLoadBalancer", arg0)
}

func (_m *MockELBAPI) DeleteLoadBalancerListenersRequest(_param0 *elb.DeleteLoadBalancerListenersInput) (*request.Request, *elb.DeleteLoadBalancerListenersOutput) {
	ret := _m.ctrl.Call(_m, "DeleteLoadBalancerListenersRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DeleteLoadBalancerListenersOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DeleteLoadBalancerListenersRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteLoadBalancerListenersRequest", arg0)
}

func (_m *MockELBAPI) DeleteLoadBalancerListeners(_param0 *elb.DeleteLoadBalancerListenersInput) (*elb.DeleteLoadBalancerListenersOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteLoadBalancerListeners", _param0)
	ret0, _ := ret[0].(*elb.DeleteLoadBalancerListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DeleteLoadBalancerListeners(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteLoadBalancerListeners", arg0)
}

func (_m *MockELBAPI) DeleteLoadBalancerPolicyRequest(_param0 *elb.DeleteLoadBalancerPolicyInput) (*request.Request, *elb.DeleteLoadBalancerPolicyOutput) {
	ret := _m.ctrl.Call(_m, "DeleteLoadBalancerPolicyRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DeleteLoadBalancerPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DeleteLoadBalancerPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteLoadBalancerPolicyRequest", arg0)
}

func (_m *MockELBAPI) DeleteLoadBalancerPolicy(_param0 *elb.DeleteLoadBalancerPolicyInput) (*elb.DeleteLoadBalancerPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteLoadBalancerPolicy", _param0)
	ret0, _ := ret[0].(*elb.DeleteLoadBalancerPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DeleteLoadBalancerPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteLoadBalancerPolicy", arg0)
}

func (_m *MockELBAPI) DeregisterInstancesFromLoadBalancerRequest(_param0 *elb.DeregisterInstancesFromLoadBalancerInput) (*request.Request, *elb.DeregisterInstancesFromLoadBalancerOutput) {
	ret := _m.ctrl.Call(_m, "DeregisterInstancesFromLoadBalancerRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DeregisterInstancesFromLoadBalancerOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DeregisterInstancesFromLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterInstancesFromLoadBalancerRequest", arg0)
}

func (_m *MockELBAPI) DeregisterInstancesFromLoadBalancer(_param0 *elb.DeregisterInstancesFromLoadBalancerInput) (*elb.DeregisterInstancesFromLoadBalancerOutput, error) {
	ret := _m.ctrl.Call(_m, "DeregisterInstancesFromLoadBalancer", _param0)
	ret0, _ := ret[0].(*elb.DeregisterInstancesFromLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DeregisterInstancesFromLoadBalancer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterInstancesFromLoadBalancer", arg0)
}

func (_m *MockELBAPI) DescribeInstanceHealthRequest(_param0 *elb.DescribeInstanceHealthInput) (*request.Request, *elb.DescribeInstanceHealthOutput) {
	ret := _m.ctrl.Call(_m, "DescribeInstanceHealthRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DescribeInstanceHealthOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeInstanceHealthRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceHealthRequest", arg0)
}

func (_m *MockELBAPI) DescribeInstanceHealth(_param0 *elb.DescribeInstanceHealthInput) (*elb.DescribeInstanceHealthOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeInstanceHealth", _param0)
	ret0, _ := ret[0].(*elb.DescribeInstanceHealthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeInstanceHealth(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceHealth", arg0)
}

func (_m *MockELBAPI) DescribeLoadBalancerAttributesRequest(_param0 *elb.DescribeLoadBalancerAttributesInput) (*request.Request, *elb.DescribeLoadBalancerAttributesOutput) {
	ret := _m.ctrl.Call(_m, "DescribeLoadBalancerAttributesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DescribeLoadBalancerAttributesOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeLoadBalancerAttributesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLoadBalancerAttributesRequest", arg0)
}

func (_m *MockELBAPI) DescribeLoadBalancerAttributes(_param0 *elb.DescribeLoadBalancerAttributesInput) (*elb.DescribeLoadBalancerAttributesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeLoadBalancerAttributes", _param0)
	ret0, _ := ret[0].(*elb.DescribeLoadBalancerAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeLoadBalancerAttributes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLoadBalancerAttributes", arg0)
}

func (_m *MockELBAPI) DescribeLoadBalancerPoliciesRequest(_param0 *elb.DescribeLoadBalancerPoliciesInput) (*request.Request, *elb.DescribeLoadBalancerPoliciesOutput) {
	ret := _m.ctrl.Call(_m, "DescribeLoadBalancerPoliciesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DescribeLoadBalancerPoliciesOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeLoadBalancerPoliciesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLoadBalancerPoliciesRequest", arg0)
}

func (_m *MockELBAPI) DescribeLoadBalancerPolicies(_param0 *elb.DescribeLoadBalancerPoliciesInput) (*elb.DescribeLoadBalancerPoliciesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeLoadBalancerPolicies", _param0)
	ret0, _ := ret[0].(*elb.DescribeLoadBalancerPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeLoadBalancerPolicies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLoadBalancerPolicies", arg0)
}

func (_m *MockELBAPI) DescribeLoadBalancerPolicyTypesRequest(_param0 *elb.DescribeLoadBalancerPolicyTypesInput) (*request.Request, *elb.DescribeLoadBalancerPolicyTypesOutput) {
	ret := _m.ctrl.Call(_m, "DescribeLoadBalancerPolicyTypesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DescribeLoadBalancerPolicyTypesOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeLoadBalancerPolicyTypesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLoadBalancerPolicyTypesRequest", arg0)
}

func (_m *MockELBAPI) DescribeLoadBalancerPolicyTypes(_param0 *elb.DescribeLoadBalancerPolicyTypesInput) (*elb.DescribeLoadBalancerPolicyTypesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeLoadBalancerPolicyTypes", _param0)
	ret0, _ := ret[0].(*elb.DescribeLoadBalancerPolicyTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeLoadBalancerPolicyTypes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLoadBalancerPolicyTypes", arg0)
}

func (_m *MockELBAPI) DescribeLoadBalancersRequest(_param0 *elb.DescribeLoadBalancersInput) (*request.Request, *elb.DescribeLoadBalancersOutput) {
	ret := _m.ctrl.Call(_m, "DescribeLoadBalancersRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DescribeLoadBalancersOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeLoadBalancersRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLoadBalancersRequest", arg0)
}

func (_m *MockELBAPI) DescribeLoadBalancers(_param0 *elb.DescribeLoadBalancersInput) (*elb.DescribeLoadBalancersOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeLoadBalancers", _param0)
	ret0, _ := ret[0].(*elb.DescribeLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeLoadBalancers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLoadBalancers", arg0)
}

func (_m *MockELBAPI) DescribeLoadBalancersPages(_param0 *elb.DescribeLoadBalancersInput, _param1 func(*elb.DescribeLoadBalancersOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeLoadBalancersPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockELBAPIRecorder) DescribeLoadBalancersPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeLoadBalancersPages", arg0, arg1)
}

func (_m *MockELBAPI) DescribeTagsRequest(_param0 *elb.DescribeTagsInput) (*request.Request, *elb.DescribeTagsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeTagsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DescribeTagsOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeTagsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeTagsRequest", arg0)
}

func (_m *MockELBAPI) DescribeTags(_param0 *elb.DescribeTagsInput) (*elb.DescribeTagsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeTags", _param0)
	ret0, _ := ret[0].(*elb.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DescribeTags(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeTags", arg0)
}

func (_m *MockELBAPI) DetachLoadBalancerFromSubnetsRequest(_param0 *elb.DetachLoadBalancerFromSubnetsInput) (*request.Request, *elb.DetachLoadBalancerFromSubnetsOutput) {
	ret := _m.ctrl.Call(_m, "DetachLoadBalancerFromSubnetsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DetachLoadBalancerFromSubnetsOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DetachLoadBalancerFromSubnetsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachLoadBalancerFromSubnetsRequest", arg0)
}

func (_m *MockELBAPI) DetachLoadBalancerFromSubnets(_param0 *elb.DetachLoadBalancerFromSubnetsInput) (*elb.DetachLoadBalancerFromSubnetsOutput, error) {
	ret := _m.ctrl.Call(_m, "DetachLoadBalancerFromSubnets", _param0)
	ret0, _ := ret[0].(*elb.DetachLoadBalancerFromSubnetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DetachLoadBalancerFromSubnets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachLoadBalancerFromSubnets", arg0)
}

func (_m *MockELBAPI) DisableAvailabilityZonesForLoadBalancerRequest(_param0 *elb.DisableAvailabilityZonesForLoadBalancerInput) (*request.Request, *elb.DisableAvailabilityZonesForLoadBalancerOutput) {
	ret := _m.ctrl.Call(_m, "DisableAvailabilityZonesForLoadBalancerRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.DisableAvailabilityZonesForLoadBalancerOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DisableAvailabilityZonesForLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableAvailabilityZonesForLoadBalancerRequest", arg0)
}

func (_m *MockELBAPI) DisableAvailabilityZonesForLoadBalancer(_param0 *elb.DisableAvailabilityZonesForLoadBalancerInput) (*elb.DisableAvailabilityZonesForLoadBalancerOutput, error) {
	ret := _m.ctrl.Call(_m, "DisableAvailabilityZonesForLoadBalancer", _param0)
	ret0, _ := ret[0].(*elb.DisableAvailabilityZonesForLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) DisableAvailabilityZonesForLoadBalancer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableAvailabilityZonesForLoadBalancer", arg0)
}

func (_m *MockELBAPI) EnableAvailabilityZonesForLoadBalancerRequest(_param0 *elb.EnableAvailabilityZonesForLoadBalancerInput) (*request.Request, *elb.EnableAvailabilityZonesForLoadBalancerOutput) {
	ret := _m.ctrl.Call(_m, "EnableAvailabilityZonesForLoadBalancerRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.EnableAvailabilityZonesForLoadBalancerOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) EnableAvailabilityZonesForLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableAvailabilityZonesForLoadBalancerRequest", arg0)
}

func (_m *MockELBAPI) EnableAvailabilityZonesForLoadBalancer(_param0 *elb.EnableAvailabilityZonesForLoadBalancerInput) (*elb.EnableAvailabilityZonesForLoadBalancerOutput, error) {
	ret := _m.ctrl.Call(_m, "EnableAvailabilityZonesForLoadBalancer", _param0)
	ret0, _ := ret[0].(*elb.EnableAvailabilityZonesForLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) EnableAvailabilityZonesForLoadBalancer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableAvailabilityZonesForLoadBalancer", arg0)
}

func (_m *MockELBAPI) ModifyLoadBalancerAttributesRequest(_param0 *elb.ModifyLoadBalancerAttributesInput) (*request.Request, *elb.ModifyLoadBalancerAttributesOutput) {
	ret := _m.ctrl.Call(_m, "ModifyLoadBalancerAttributesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.ModifyLoadBalancerAttributesOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) ModifyLoadBalancerAttributesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyLoadBalancerAttributesRequest", arg0)
}

func (_m *MockELBAPI) ModifyLoadBalancerAttributes(_param0 *elb.ModifyLoadBalancerAttributesInput) (*elb.ModifyLoadBalancerAttributesOutput, error) {
	ret := _m.ctrl.Call(_m, "ModifyLoadBalancerAttributes", _param0)
	ret0, _ := ret[0].(*elb.ModifyLoadBalancerAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) ModifyLoadBalancerAttributes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyLoadBalancerAttributes", arg0)
}

func (_m *MockELBAPI) RegisterInstancesWithLoadBalancerRequest(_param0 *elb.RegisterInstancesWithLoadBalancerInput) (*request.Request, *elb.RegisterInstancesWithLoadBalancerOutput) {
	ret := _m.ctrl.Call(_m, "RegisterInstancesWithLoadBalancerRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.RegisterInstancesWithLoadBalancerOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) RegisterInstancesWithLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterInstancesWithLoadBalancerRequest", arg0)
}

func (_m *MockELBAPI) RegisterInstancesWithLoadBalancer(_param0 *elb.RegisterInstancesWithLoadBalancerInput) (*elb.RegisterInstancesWithLoadBalancerOutput, error) {
	ret := _m.ctrl.Call(_m, "RegisterInstancesWithLoadBalancer", _param0)
	ret0, _ := ret[0].(*elb.RegisterInstancesWithLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) RegisterInstancesWithLoadBalancer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterInstancesWithLoadBalancer", arg0)
}

func (_m *MockELBAPI) RemoveTagsRequest(_param0 *elb.RemoveTagsInput) (*request.Request, *elb.RemoveTagsOutput) {
	ret := _m.ctrl.Call(_m, "RemoveTagsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.RemoveTagsOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) RemoveTagsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTagsRequest", arg0)
}

func (_m *MockELBAPI) RemoveTags(_param0 *elb.RemoveTagsInput) (*elb.RemoveTagsOutput, error) {
	ret := _m.ctrl.Call(_m, "RemoveTags", _param0)
	ret0, _ := ret[0].(*elb.RemoveTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) RemoveTags(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTags", arg0)
}

func (_m *MockELBAPI) SetLoadBalancerListenerSSLCertificateRequest(_param0 *elb.SetLoadBalancerListenerSSLCertificateInput) (*request.Request, *elb.SetLoadBalancerListenerSSLCertificateOutput) {
	ret := _m.ctrl.Call(_m, "SetLoadBalancerListenerSSLCertificateRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.SetLoadBalancerListenerSSLCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) SetLoadBalancerListenerSSLCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLoadBalancerListenerSSLCertificateRequest", arg0)
}

func (_m *MockELBAPI) SetLoadBalancerListenerSSLCertificate(_param0 *elb.SetLoadBalancerListenerSSLCertificateInput) (*elb.SetLoadBalancerListenerSSLCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "SetLoadBalancerListenerSSLCertificate", _param0)
	ret0, _ := ret[0].(*elb.SetLoadBalancerListenerSSLCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) SetLoadBalancerListenerSSLCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLoadBalancerListenerSSLCertificate", arg0)
}

func (_m *MockELBAPI) SetLoadBalancerPoliciesForBackendServerRequest(_param0 *elb.SetLoadBalancerPoliciesForBackendServerInput) (*request.Request, *elb.SetLoadBalancerPoliciesForBackendServerOutput) {
	ret := _m.ctrl.Call(_m, "SetLoadBalancerPoliciesForBackendServerRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.SetLoadBalancerPoliciesForBackendServerOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) SetLoadBalancerPoliciesForBackendServerRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLoadBalancerPoliciesForBackendServerRequest", arg0)
}

func (_m *MockELBAPI) SetLoadBalancerPoliciesForBackendServer(_param0 *elb.SetLoadBalancerPoliciesForBackendServerInput) (*elb.SetLoadBalancerPoliciesForBackendServerOutput, error) {
	ret := _m.ctrl.Call(_m, "SetLoadBalancerPoliciesForBackendServer", _param0)
	ret0, _ := ret[0].(*elb.SetLoadBalancerPoliciesForBackendServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) SetLoadBalancerPoliciesForBackendServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLoadBalancerPoliciesForBackendServer", arg0)
}

func (_m *MockELBAPI) SetLoadBalancerPoliciesOfListenerRequest(_param0 *elb.SetLoadBalancerPoliciesOfListenerInput) (*request.Request, *elb.SetLoadBalancerPoliciesOfListenerOutput) {
	ret := _m.ctrl.Call(_m, "SetLoadBalancerPoliciesOfListenerRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*elb.SetLoadBalancerPoliciesOfListenerOutput)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) SetLoadBalancerPoliciesOfListenerRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLoadBalancerPoliciesOfListenerRequest", arg0)
}

func (_m *MockELBAPI) SetLoadBalancerPoliciesOfListener(_param0 *elb.SetLoadBalancerPoliciesOfListenerInput) (*elb.SetLoadBalancerPoliciesOfListenerOutput, error) {
	ret := _m.ctrl.Call(_m, "SetLoadBalancerPoliciesOfListener", _param0)
	ret0, _ := ret[0].(*elb.SetLoadBalancerPoliciesOfListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockELBAPIRecorder) SetLoadBalancerPoliciesOfListener(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLoadBalancerPoliciesOfListener", arg0)
}

func (_m *MockELBAPI) WaitUntilAnyInstanceInService(_param0 *elb.DescribeInstanceHealthInput) error {
	ret := _m.ctrl.Call(_m, "WaitUntilAnyInstanceInService", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockELBAPIRecorder) WaitUntilAnyInstanceInService(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WaitUntilAnyInstanceInService", arg0)
}

func (_m *MockELBAPI) WaitUntilInstanceDeregistered(_param0 *elb.DescribeInstanceHealthInput) error {
	ret := _m.ctrl.Call(_m, "WaitUntilInstanceDeregistered", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockELBAPIRecorder) WaitUntilInstanceDeregistered(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WaitUntilInstanceDeregistered", arg0)
}

func (_m *MockELBAPI) WaitUntilInstanceInService(_param0 *elb.DescribeInstanceHealthInput) error {
	ret := _m.ctrl.Call(_m, "WaitUntilInstanceInService", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockELBAPIRecorder) WaitUntilInstanceInService(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WaitUntilInstanceInService", arg0)
}
