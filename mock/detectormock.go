// Code generated by MockGen. DO NOT EDIT.
// Source: detector/detector.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	issue "github.com/wata727/tflint/issue"
	reflect "reflect"
)

// MockDetectorIF is a mock of DetectorIF interface
type MockDetectorIF struct {
	ctrl     *gomock.Controller
	recorder *MockDetectorIFMockRecorder
}

// MockDetectorIFMockRecorder is the mock recorder for MockDetectorIF
type MockDetectorIFMockRecorder struct {
	mock *MockDetectorIF
}

// NewMockDetectorIF creates a new mock instance
func NewMockDetectorIF(ctrl *gomock.Controller) *MockDetectorIF {
	mock := &MockDetectorIF{ctrl: ctrl}
	mock.recorder = &MockDetectorIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDetectorIF) EXPECT() *MockDetectorIFMockRecorder {
	return m.recorder
}

// Detect mocks base method
func (m *MockDetectorIF) Detect() []*issue.Issue {
	ret := m.ctrl.Call(m, "Detect")
	ret0, _ := ret[0].([]*issue.Issue)
	return ret0
}

// Detect indicates an expected call of Detect
func (mr *MockDetectorIFMockRecorder) Detect() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detect", reflect.TypeOf((*MockDetectorIF)(nil).Detect))
}

// HasError mocks base method
func (m *MockDetectorIF) HasError() bool {
	ret := m.ctrl.Call(m, "HasError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasError indicates an expected call of HasError
func (mr *MockDetectorIFMockRecorder) HasError() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasError", reflect.TypeOf((*MockDetectorIF)(nil).HasError))
}
